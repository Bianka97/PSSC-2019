//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proiectfinalpssc.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    
    public partial class CUSTOMER
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public CUSTOMER()
        {
            this.TRANSACTIONS = new HashSet<TRANSACTION>();
            FIRSTNAME = "0";
        }
        [Required(ErrorMessage ="This field is required")]
        public string IBAN { get; set; }
        [Required(ErrorMessage = "This field is required")]
        public string USERNAME { get; set; }
        [DataType(DataType.Password)]
        public string PASSWORD { get; set; }
        [Required(ErrorMessage = "This field is required")]
        public string FIRSTNAME { get; set; } // this functions get and sets the balance of the account
        [Required(ErrorMessage = "This field is required")]
        public string LASTNAME { get; set; }
        private int balance;
        private int minBalance=20;

        public void Deposit(int amount)
        {
            if (amount >= 0)
                balance += amount;
            else throw new NotValidTransferSumException();
        }

        public void Withdraw(int amount)
        {
            if (amount >= 0)
                balance -= amount;
            else throw new NotValidTransferSumException();
        }

        public void TransferFunds(CUSTOMER destination, int amount)
        {
            destination.Deposit(amount);
            Withdraw(amount);
        }

        public CUSTOMER TransferMinFunds(CUSTOMER destination, int amount)
        {
            if (Balance - amount > MinBalance)
            {
                destination.Deposit(amount);
                Withdraw(amount);
            }
            else throw new NotEnoughFundsException();
            return destination;
        }



        public float Balance
        {
            get { return balance; }
        }


        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<TRANSACTION> TRANSACTIONS { get; set; }
        public float MinBalance { get => minBalance; set => minBalance = 40; }
    }
}
